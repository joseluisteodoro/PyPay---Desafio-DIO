#Este √© o sistema banc√°rio criado para o desafio da DIO
#O desafio consiste em criar um sistema banc√°rio em que:

#Deve possuir 3 fun√ß√µes: Saque, Dep√≥sito e Extrato
#O valores retornado em extrato deve ser no formato R$ 100,00
#Cada saque e dep√≥sito deve ser armazenado no extrato devidamente identificado
#Exibir mensagens de erro caso o saldo seja insuficiente e demais erros poss√≠veis
#Possuir Menu - E n√£o √© necess√°rio possuir usu√°rio

#Fase 1.5 - adicionar limite di√°rio de 10 transa√ß√µes di√°rias
#filtrar as opera√ß√µes di√°rias, se j√° atingiu 10, bloqueie qualquer opera√ß√£o
#O extrato deve conter data e hora das transa√ß√µes.

#Fase 2 - Usando fun√ß√µes/m√≥dulos
#Transformando c√≥digo com m√≥dulos
#Adicionando fun√ß√µes de criar usu√°rio e criar conta.
#A ag√™ncia sempre ser√° 001
#Cada usu√°rio pode ter mais de uma conta, as contas deve ser sequenciais
#Saque deve receber apenas argumentos por nome
#Fun√ß√£o dep√≥sito deve receber argumentos somente por posi√ß√£o
#extrato deve receber argumentos por posi√ß√£o e nome
#Armazenar usu√°rios em uma lista, o usu√°rio √© composto por: Nome, data de nascimento, cpf e endere√ßo, sendo o endere√ßo logradouro,n,bairro,cidade/UF
#CPF somente n√∫meros



#Importa√ß√µes
from datetime import datetime
from tracemalloc import stop

#Sauda√ß√£o:
def saudacao():
     print("""
     ++++++++++++++++++++++++++++++++++++      
          Ol√°! Seja Bem ao PyPay!üåê
     O melhor banco digital em Pyhon!üêç
          
     +++++++++Version: V2.0++++++++++++++
          """)

     #return saudacao()
saudacao()
#Menu:

def menu():
     print("""
     ************************************
                    MENU
     ************************************      

     [1] - üì® Dep√≥sito
     [2] - üí≤ Saque
     [3] - üßæ Ver extrato
     [4] - ‚ûï Criar usu√°rio
     [5] - üî∑ Criar conta
     [0] - ‚ùå Sair

     Digite a op√ß√£o desejada: """, end="")
     return int(input())
     

#Iniciamos definindo valores base para o c√≥digo
saldo = 0
LIMITE = 500
extrato = f""
saques_feitos = 0
transacoes_realizadas = []
usuarios = []
LIMITE_SAQUE = 3
LIMITE_TRANSACAO_DIARIA = 10
contas = []
AGENCIA = "0001"

msg_valor_invalido = "Falha! Informe um valor a partir de R$ 0,01\n"
msg_limite_saque = F"Limite de {LIMITE_SAQUE} saque(s) atingidos!\n"
msg_limite_transacoes = f"Limite de {LIMITE_TRANSACAO_DIARIA} transa√ß√µes di√°rias excedido\n"

def depositar(saldo, valor, extrato,/):
     if valor > 0:
          saldo += valor
          transacoes_realizadas.append(datetime.now().strftime("%d/%m/%Y"))
          data_atual = datetime.now().strftime("%d/%m/%Y, %H:%M:%S")
          extrato += f"{data_atual} || Dep√≥sito || R$ {valor:.2f}\n"
          print(f"Dep√≥sito de R$ {valor:.2f} realizado com sucesso!!\nSaldo atual R$ {saldo:.2f}\n")

     else:     
          print(msg_valor_invalido)

     return saldo, extrato


def sacar(*, saldo, valor, extrato, LIMITE,saques_feitos,LIMITE_SAQUE):
     saldo_insuficiente = valor > saldo
     limite_insuficiente = valor > LIMITE
     saques_excedido = saques_feitos >= LIMITE_SAQUE
     
     if saldo_insuficiente:
                    print(f"Falha! Valor digitado maior que o saldo. Saldo atual R$ {saldo:.2f}\n")
     elif limite_insuficiente:
          print(f"Falha! Seu limite por saque √© de R$ {LIMITE}.\n")
     elif saques_excedido:
          print(msg_limite_saque)      
     
          #Opera√ß√£o de saque    
     elif valor > 0:
          saldo -= valor
          transacoes_realizadas.append(datetime.now().strftime("%d/%m/%Y"))
          data_atual = datetime.now().strftime("%d/%m/%Y, %H:%M:%S")
          extrato += f"{data_atual} || Saque    || R$ {valor:.2f}\n"
          print(f"Saque de R$ {valor:.2f} realizado com sucesso!!\nSaldo atual R$ {saldo:.2f}\n")
          saques_feitos += 1
     else:
          print(msg_valor_invalido)

     return saldo, extrato


def mostrar_extrato(saldo,/,*, extrato):
     if extrato == f"":
          print("Nenhuma movimenta√ß√£o realizada!")
     
     else:
          print("************************************")
          print("            Extrato")
          print("************************************")
          print(extrato)
     return saldo, extrato


def novo_usuario(usuarios):
     cpf = input("Informe seu CPF (Apenas n√∫meros): ")
     usuario = filtrar_usuario(cpf,usuarios)

     if usuario:
          print("Essa conta j√° existe!")
          return
     
     nome = input("Digite sem nome completo: ")
     nascimento = input("Informe sua data de nascimento (DD-MM-AAAA): ")
     endereco = input("Informe seu endere√ßo (Logradouro, n¬∫ - bairro - Cidade/UF): ")

     usuarios.append({"nome":nome, "nascimento": nascimento,"cpf":cpf, "endereco":endereco})

     print("Usu√°rio criado com sucesso!!\n")

def filtrar_usuario(cpf, usuarios):
     usuarios_filtro = [usuario for usuario in usuarios if usuario["cpf"] == cpf]
     return usuarios_filtro[0] if usuarios_filtro else None

     
def nova_conta(AGENCIA, numero_conta, usuario):
     cpf = input("Informe seu CPF: ")
     usuario = filtrar_usuario(cpf, usuarios)

     if usuario:
          print("Conta criada com sucesso!!!")
          return {"AGENCIA": AGENCIA, "numero_conta":numero_conta, "usuario":usuario}

     print("Usu√°rio n√£o encontrado")


#Definimos while True para fazer um looping
while True:

    opcao = int(menu())

    #Dep√≥sito
    if opcao == 1:
          transacoes_hoje = transacoes_realizadas.count(datetime.now().strftime("%d/%m/%Y"))
          transacoes_excedidas = transacoes_hoje >= LIMITE_TRANSACAO_DIARIA
          
          if transacoes_excedidas:
               print(msg_limite_transacoes)
          else:     
               valor = float(input("Informe o valor que deseja sacar: "))
               saldo, extrato = depositar(saldo, valor, extrato)


     #Saque
    elif opcao == 2:         
         transacoes_hoje = transacoes_realizadas.count(datetime.now().strftime("%d/%m/%Y"))
         transacoes_excedidas = transacoes_hoje >= LIMITE_TRANSACAO_DIARIA
         if transacoes_excedidas:
               print(msg_limite_transacoes)

         else:
              valor = float(input("Informe o valor que deseja depositar: "))
              saldo, extrato = sacar(
                    saldo=saldo,
                    valor=valor,
                    extrato=extrato,
                    LIMITE=LIMITE,
                    saques_feitos=saques_feitos,
                    LIMITE_SAQUE=LIMITE_SAQUE
                    )
     
    elif opcao == 4:
          novo_usuario(usuarios)

    elif opcao == 5:
         numero_conta = len(contas) + 1
         conta = nova_conta(AGENCIA, numero_conta, usuarios)

         if conta:
              contas.append(conta)
                      

    #Extrato          
    elif opcao == 3:
         saldo, extrato = mostrar_extrato(saldo,extrato=extrato)

    elif opcao == 0:
         print("At√© logo!!")
         break
    else:
         print("\n Digite uma op√ß√£o v√°lida! \n")

    






